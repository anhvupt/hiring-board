// <auto-generated />
using System;
using HiringBoard.Api.Infrastructure.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HiringBoard.Api.Migrations
{
    [DbContext(typeof(EfContext))]
    partial class EfContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FirstName")
                        .HasDatabaseName("IX_Candidate_Firstname");

                    b.HasIndex("LastName")
                        .HasDatabaseName("Ix_Candidate_Lastname");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "mireya@champlinrodriguez.name",
                            FirstName = "Nadia",
                            IsDeleted = false,
                            LastName = "Altenwerth",
                            Phone = "(074)830-2675 x18727"
                        },
                        new
                        {
                            Id = 2,
                            Email = "cedrick@durgan.uk",
                            FirstName = "Cary",
                            IsDeleted = false,
                            LastName = "Franecki",
                            Phone = "034.776.1279 x075"
                        },
                        new
                        {
                            Id = 3,
                            Email = "courtney.johnson@nicolas.name",
                            FirstName = "Kendrick",
                            IsDeleted = false,
                            LastName = "Hahn",
                            Phone = "1-592-952-8665 x3576"
                        },
                        new
                        {
                            Id = 4,
                            Email = "yadira@labadiefadel.biz",
                            FirstName = "Carli",
                            IsDeleted = false,
                            LastName = "Roob",
                            Phone = "500-436-4262 x84315"
                        },
                        new
                        {
                            Id = 5,
                            Email = "dominic_kub@heathcote.ca",
                            FirstName = "Jacques",
                            IsDeleted = false,
                            LastName = "Abernathy",
                            Phone = "(696)465-2404 x3845"
                        },
                        new
                        {
                            Id = 6,
                            Email = "casper@jewess.uk",
                            FirstName = "Loraine",
                            IsDeleted = false,
                            LastName = "Weber",
                            Phone = "(365)554-0101 x0252"
                        },
                        new
                        {
                            Id = 7,
                            Email = "ophelia.rice@huelsbergstrom.uk",
                            FirstName = "Philip",
                            IsDeleted = false,
                            LastName = "Hackett",
                            Phone = "831-711-9989"
                        },
                        new
                        {
                            Id = 8,
                            Email = "elena@beckerdonnelly.co.uk",
                            FirstName = "Margarett",
                            IsDeleted = false,
                            LastName = "Robel",
                            Phone = "(125)242-3587"
                        },
                        new
                        {
                            Id = 9,
                            Email = "kaela@wilderman.com",
                            FirstName = "Jewel",
                            IsDeleted = false,
                            LastName = "Kihn",
                            Phone = "260-893-4757"
                        },
                        new
                        {
                            Id = 10,
                            Email = "michale@kassulkeokon.name",
                            FirstName = "Joy",
                            IsDeleted = false,
                            LastName = "Osinski",
                            Phone = "999-247-8060 x002"
                        });
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId1")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("InterviewDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InterviewerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.HasIndex("CandidateId1")
                        .IsUnique();

                    b.HasIndex("InterviewerId");

                    b.HasIndex("StageId");

                    b.ToTable("Interviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 24, 22, 7, 1, 770, DateTimeKind.Unspecified).AddTicks(5623), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 1,
                            IsDeleted = false,
                            Notes = "Rem est qui incidunt.",
                            StageId = 2
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 2,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 24, 22, 7, 1, 770, DateTimeKind.Unspecified).AddTicks(6833), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 1,
                            IsDeleted = false,
                            Notes = "Mollitia optio quod excepturi perspiciatis nihil qui.",
                            StageId = 1
                        },
                        new
                        {
                            Id = 3,
                            CandidateId = 3,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 24, 22, 7, 1, 770, DateTimeKind.Unspecified).AddTicks(8299), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Esse eos dolor sint magnam sapiente consectetur sed aperiam laboriosam.",
                            StageId = 3
                        },
                        new
                        {
                            Id = 4,
                            CandidateId = 4,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 24, 22, 7, 1, 771, DateTimeKind.Unspecified).AddTicks(547), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 1,
                            IsDeleted = false,
                            Notes = "Aliquid placeat omnis repellendus eos dolor tempora itaque ut delectus.",
                            StageId = 1
                        },
                        new
                        {
                            Id = 5,
                            CandidateId = 5,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 24, 22, 7, 1, 771, DateTimeKind.Unspecified).AddTicks(2628), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Saepe unde sit et consequuntur.",
                            StageId = 1
                        },
                        new
                        {
                            Id = 6,
                            CandidateId = 6,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 24, 22, 7, 1, 771, DateTimeKind.Unspecified).AddTicks(3725), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Quam dolorem quis recusandae illo est accusantium.",
                            StageId = 3
                        },
                        new
                        {
                            Id = 7,
                            CandidateId = 7,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 24, 22, 7, 1, 771, DateTimeKind.Unspecified).AddTicks(5263), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Quia eos ab vitae repellendus sint itaque.",
                            StageId = 2
                        },
                        new
                        {
                            Id = 8,
                            CandidateId = 8,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 24, 22, 7, 1, 771, DateTimeKind.Unspecified).AddTicks(6678), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Autem quia est consequatur non qui maiores necessitatibus nisi.",
                            StageId = 3
                        },
                        new
                        {
                            Id = 9,
                            CandidateId = 9,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 24, 22, 7, 1, 771, DateTimeKind.Unspecified).AddTicks(8576), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Quasi eligendi eligendi qui excepturi assumenda animi quibusdam voluptate dolorem.",
                            StageId = 2
                        },
                        new
                        {
                            Id = 10,
                            CandidateId = 10,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 24, 22, 7, 1, 772, DateTimeKind.Unspecified).AddTicks(2402), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Facilis aut voluptatum eum inventore odit pariatur iste.",
                            StageId = 3
                        });
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Interviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Interviewers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Camron Klein"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Miss Hillary Darby Gusikowski"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Javier Gutmann"
                        });
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Applied"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Interviewing"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Offered"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Hired"
                        });
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Interview", b =>
                {
                    b.HasOne("HiringBoard.Api.Domain.Entities.Candidate", "Candidate")
                        .WithOne()
                        .HasForeignKey("HiringBoard.Api.Domain.Entities.Interview", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiringBoard.Api.Domain.Entities.Candidate", null)
                        .WithOne("Interview")
                        .HasForeignKey("HiringBoard.Api.Domain.Entities.Interview", "CandidateId1");

                    b.HasOne("HiringBoard.Api.Domain.Entities.Interviewer", "Interviewer")
                        .WithMany("Interviews")
                        .HasForeignKey("InterviewerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HiringBoard.Api.Domain.Entities.Stage", "Stage")
                        .WithMany("Interviews")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Candidate");

                    b.Navigation("Interviewer");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Candidate", b =>
                {
                    b.Navigation("Interview")
                        .IsRequired();
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Interviewer", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Stage", b =>
                {
                    b.Navigation("Interviews");
                });
#pragma warning restore 612, 618
        }
    }
}
