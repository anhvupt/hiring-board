// <auto-generated />
using System;
using HiringBoard.Api.Infrastructure.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HiringBoard.Api.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20240326141504_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FirstName")
                        .HasDatabaseName("IX_Candidate_Firstname");

                    b.HasIndex("LastName")
                        .HasDatabaseName("Ix_Candidate_Lastname");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "josiah.stokes@cassinbrakus.co.uk",
                            FirstName = "Carmine",
                            IsDeleted = false,
                            LastName = "Lakin",
                            Phone = "399.443.6655"
                        },
                        new
                        {
                            Id = 2,
                            Email = "melvin_ward@swaniawski.info",
                            FirstName = "Shaylee",
                            IsDeleted = false,
                            LastName = "Mitchell",
                            Phone = "1-190-432-7848 x2744"
                        },
                        new
                        {
                            Id = 3,
                            Email = "demarcus_hoeger@cruickshank.com",
                            FirstName = "Samara",
                            IsDeleted = false,
                            LastName = "Feeney",
                            Phone = "598-173-8221 x35450"
                        },
                        new
                        {
                            Id = 4,
                            Email = "josiah.schaefer@greenfelderbrekke.ca",
                            FirstName = "Nayeli",
                            IsDeleted = false,
                            LastName = "Wilkinson",
                            Phone = "1-307-834-3481 x03372"
                        },
                        new
                        {
                            Id = 5,
                            Email = "jamil_davis@beier.uk",
                            FirstName = "Stewart",
                            IsDeleted = false,
                            LastName = "Bartoletti",
                            Phone = "(969)416-1116"
                        },
                        new
                        {
                            Id = 6,
                            Email = "moshe@ornschaden.ca",
                            FirstName = "Vinnie",
                            IsDeleted = false,
                            LastName = "Luettgen",
                            Phone = "861.001.4966"
                        },
                        new
                        {
                            Id = 7,
                            Email = "phyllis_bayer@heaney.ca",
                            FirstName = "Jude",
                            IsDeleted = false,
                            LastName = "Cormier",
                            Phone = "(208)624-6540"
                        },
                        new
                        {
                            Id = 8,
                            Email = "ubaldo_kunze@abbott.info",
                            FirstName = "Francesco",
                            IsDeleted = false,
                            LastName = "Bruen",
                            Phone = "838.750.0933 x07702"
                        },
                        new
                        {
                            Id = 9,
                            Email = "elizabeth_kiehn@kundehilpert.us",
                            FirstName = "Joaquin",
                            IsDeleted = false,
                            LastName = "Gerlach",
                            Phone = "(406)500-2983"
                        },
                        new
                        {
                            Id = 10,
                            Email = "floy_eichmann@brakusbuckridge.uk",
                            FirstName = "Roxane",
                            IsDeleted = false,
                            LastName = "Trantow",
                            Phone = "414-429-4374 x966"
                        });
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("InterviewDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InterviewerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.HasIndex("InterviewerId");

                    b.HasIndex("StageId");

                    b.ToTable("Interviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 26, 21, 15, 3, 799, DateTimeKind.Unspecified).AddTicks(5064), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 1,
                            IsDeleted = false,
                            Notes = "Ullam architecto porro quisquam facilis et quia ut eum.",
                            StageId = 2
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 2,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 26, 21, 15, 3, 799, DateTimeKind.Unspecified).AddTicks(6712), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Amet omnis tempora animi similique sint.",
                            StageId = 2
                        },
                        new
                        {
                            Id = 3,
                            CandidateId = 3,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 26, 21, 15, 3, 799, DateTimeKind.Unspecified).AddTicks(7642), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 1,
                            IsDeleted = false,
                            Notes = "Similique repellat corrupti unde architecto expedita et non.",
                            StageId = 1
                        },
                        new
                        {
                            Id = 4,
                            CandidateId = 4,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 26, 21, 15, 3, 799, DateTimeKind.Unspecified).AddTicks(8828), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 1,
                            IsDeleted = false,
                            Notes = "Voluptatem praesentium maxime omnis perspiciatis quos sit.",
                            StageId = 1
                        },
                        new
                        {
                            Id = 5,
                            CandidateId = 5,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 26, 21, 15, 3, 800, DateTimeKind.Unspecified).AddTicks(5), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Amet et aliquid perspiciatis nostrum voluptatem.",
                            StageId = 1
                        },
                        new
                        {
                            Id = 6,
                            CandidateId = 6,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 26, 21, 15, 3, 800, DateTimeKind.Unspecified).AddTicks(914), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Quia ab omnis fugiat vel optio impedit sit.",
                            StageId = 1
                        },
                        new
                        {
                            Id = 7,
                            CandidateId = 7,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 26, 21, 15, 3, 800, DateTimeKind.Unspecified).AddTicks(2149), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 2,
                            IsDeleted = false,
                            Notes = "Quo animi aliquam nam autem.",
                            StageId = 1
                        },
                        new
                        {
                            Id = 8,
                            CandidateId = 8,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 26, 21, 15, 3, 800, DateTimeKind.Unspecified).AddTicks(2910), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 1,
                            IsDeleted = false,
                            Notes = "Saepe illum provident voluptatibus rerum.",
                            StageId = 2
                        },
                        new
                        {
                            Id = 9,
                            CandidateId = 9,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 26, 21, 15, 3, 800, DateTimeKind.Unspecified).AddTicks(3699), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 1,
                            IsDeleted = false,
                            Notes = "Cupiditate omnis impedit vitae beatae assumenda consectetur eius.",
                            StageId = 3
                        },
                        new
                        {
                            Id = 10,
                            CandidateId = 10,
                            InterviewDate = new DateTimeOffset(new DateTime(2024, 3, 26, 21, 15, 3, 800, DateTimeKind.Unspecified).AddTicks(5002), new TimeSpan(0, 7, 0, 0, 0)),
                            InterviewerId = 1,
                            IsDeleted = false,
                            Notes = "Tenetur aliquam iure vel numquam officia consequatur sit.",
                            StageId = 2
                        });
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Interviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Interviewers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Prof. Elsie Muller"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Prof. Ladarius Boehm"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Nakia Baumbach"
                        });
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Applied"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Interviewing"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Offered"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Hired"
                        });
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Interview", b =>
                {
                    b.HasOne("HiringBoard.Api.Domain.Entities.Candidate", "Candidate")
                        .WithOne("Interview")
                        .HasForeignKey("HiringBoard.Api.Domain.Entities.Interview", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiringBoard.Api.Domain.Entities.Interviewer", "Interviewer")
                        .WithMany("Interviews")
                        .HasForeignKey("InterviewerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HiringBoard.Api.Domain.Entities.Stage", "Stage")
                        .WithMany("Interviews")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Candidate");

                    b.Navigation("Interviewer");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Candidate", b =>
                {
                    b.Navigation("Interview")
                        .IsRequired();
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Interviewer", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("HiringBoard.Api.Domain.Entities.Stage", b =>
                {
                    b.Navigation("Interviews");
                });
#pragma warning restore 612, 618
        }
    }
}
